data.points <- sample(data.points) # Permute randomly
train <- data.points[1:floor(n/2)] # First random half is training
test <- data.points[-(1:floor(n/2))] # 2nd random half is testing
candidate.component.numbers <- 1:10
loglikes <- vector(length= 1 + length(candidate.component.numbers))
# k=1 needs special handling
mu <- mean(xLo$xLo[train]) # MLE of mean
sigma <- sd(xLo$xLo[train])*sqrt((n-1)/n) # MLE of standard deviation
loglikes[1] <- sum(dnorm(xLo$xLo[test], mu, sigma, log=TRUE))
loglikes
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
candidate.component.numbers <- 2:10
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
plot(x=1:10, y=loglikes,xlab="Number of mixture components",
ylab="Log-likelihood on testing data")
plot(x=1:1q, y=loglikes,xlab="Number of mixture components",
ylab="Log-likelihood on testing data")
plot(x=1:11, y=loglikes,xlab="Number of mixture components",
ylab="Log-likelihood on testing data")
candidate.component.numbers <- 2:10
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
summary(xLo)
summary(mixLo)
snoq.boot = boot.comp(xLo$xLo, max.comp=10, mix.type="normalmix",
maxit=400,epsilon=1e-2)
snoq.boot
snoq.boot$p.values
xLo.boot = boot.comp(xLo$xLo, max.comp=3, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=3, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=4, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=10, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=10, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=5, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=6, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=7, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=7, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=7, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=7, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=7, mix.type="normalmix",
maxit=400,epsilon=1e-2)
xLo.boot = boot.comp(xLo$xLo, max.comp=10, mix.type="normalmix",
maxit=400,epsilon=1e-2)
str(xLo.boot)
xLo.boot$p.values
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
candidate.component.numbers <- 2:10
candidate.component.numbers
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
candidate.component.numbers <- 2:10
loglikes <- vector(length=1+length(candidate.component.numbers))
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
candidate.component.numbers <- 1:10
loglikes <- vector(length=candidate.component.numbers)
loglikes <- vector(length(candidate.component.numbers)
)
loglikes <- vector(length=1+length(candidate.component.numbers))
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
candidate.component.numbers <- 1:10
loglikes <- vector(length=1+length(candidate.component.numbers))
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
candidate.component.numbers <- 2:10
loglikes <- vector(length=1+length(candidate.component.numbers))
loglikes
candidate.component.numbers <- 1:10
loglikes <- vector(length(candidate.component.numbers))
help("vector")
loglikes <- vector(length = length(candidate.component.numbers))
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xLo$xLo[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xLo$xLo[test],mixture=mixture)
}
loglikes
n <- nrow(xMed)
data.points <- 1:n
data.points <- sample(data.points) # Permute randomly
train <- data.points[1:floor(n/2)] # First random half is training
test <- data.points[-(1:floor(n/2))] # 2nd random half is testing
candidate.component.numbers <- 2:10
loglikes <- vector(length=1+length(candidate.component.numbers))
# k=1 needs special handling
mu<-mean(xMed$xMed[train]) # MLE of mean
sigma <- sd(xMed$xMed[train])*sqrt((n-1)/n) # MLE of standard deviation
loglikes[1] <- sum(dnorm(xMed$xMed[test],mu,sigma,log=TRUE))
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xMed$xMed[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xMed$xMed[test],mixture=mixture)
}
for (k in candidate.component.numbers) {
mixture <- normalmixEM(xMed$xMed[train],k=k,maxit=400,epsilon=1e-2)
loglikes[k] <- loglike.normalmix(xMed$xMed[test],mixture=mixture)
}
loglikes
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=400,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=400,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=400,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=500,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot
xMed.boot$p.values
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot$p.values
hist(xMed$xMed)
hist(xMed$xMed)
hist(xMed$xMed)
hist(xMed$xMed)
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot$p.values
xMed.boot <- boot.comp(xMed$xMed,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
boot.se(mixLo)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xMed.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xLo.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
xLo
xLo.boot$p.values
hist(xLo$xLo)
xHi.boot <- boot.comp(xHi$xHi,max.comp=10,mix.type="normalmix",
maxit=1000,epsilon=1e-2)
hist(xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100))
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100))
xaxt = 'n'
rm(xaxt)
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), tick=FALSE)
help("hist")
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 1.5 tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 1.5, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 5, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 50, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 1.5, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.lab = 50, tick = FALSE)
par()
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', cex.lab = 1.5)
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.axis = 1.5, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.axis = 1.2, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), cex.axis = 1, tick = FALSE)
hist(xHi$xHi, main = 'Distribution of Generative Strength Ratings (1.0)', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
mtext(side = 1, line=4)
axis(2, font = 2, tick = FALSE)
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n' cex.lab = 1)
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(2, font = 2, tick = FALSE)
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(2, font = 2, tick = FALSE, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xLo$xLo, main = 'Low Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xLo$xLo, main = 'Low Base Rate/Large Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
help("hist")
hist(xHi$xHi, main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 15, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 12, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 15, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 14, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 13, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xLo$xLo, main = 'Low Base Rate/Large Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0), font = 2, tick = FALSE)
axis(1, at = 0, labels = c(0), font = 2, tick = FALSE)
axis(1, at = 0, labels = 0, font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(2, font = 2, las = 1)
axis(1, font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
hist(xLo$xLo, main = 'Low Base Rate/Large Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
axis(1, font = 2, tick = FALSE)
hist(xLo$xLo, main = 'Low Base Rate/Large Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, xaxt = 'n', yaxt = 'n', cex.lab = 1)
axis(1, font = 2, tick = FALSE)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
library(mixtools)
freqHi = subset(strength_freq_causal_exp4.2$base.rate == 'hi')
freqHi = subset(strength_freq_causal_exp4.2, strength_freq_causal_exp4.2$base.rate == 'hi')
relHi = subset(strength_reliability_causal_exp4.2m strength_reliability_causal_exp4.2$base.rate == 'hi')
relHi = subset(strength_reliability_causal_exp4.2m, strength_reliability_causal_exp4.2$base.rate == 'hi')
relHi = subset(strength_reliability_causal_exp4.2, strength_reliability_causal_exp4.2$base.rate == 'hi')
xhi = append(freqHi,relHi)
xhi = append(freqHi$frequency,relHi$reliability)
freqMed = subset(strength_freq_causal_exp4.2, strength_freq_causal_exp4.2$base.rate == 'med')
relMed = subset(strength_reliability_causal_exp4.2, strength_reliability_causal_exp4.2$base.rate == 'med')
xmed = append(freqMed$frequency,relMed$reliability)
freqlo = subset(strength_freq_causal_exp4.2, strength_freq_causal_exp4.2$base.rate == 'lo')
relLo = subset(strength_reliability_causal_exp4.2, strength_reliability_causal_exp4.2$base.rate == 'lo')
xlo = append(freqLo$frequency,relLo$reliability)
xlo = append(freqlo$frequency,relLo$reliability)
xlo = na.omit(freqlo$frequency,relLo$reliability)
xlo = append(freqlo$frequency,relLo$reliability)
xlo = na.omit(xlo)
xlo = data.frame(na.omit(xlo))
xmed = data.frame(na.omit(xmed))
xhi = data.frame(na.omit(xhi))
mixhi <- normalmixEM(xhi,k=2,maxit=100,epsilon=0.01)
mixhi <- normalmixEM(xhi$na.omit.xhi.,k=2,maxit=100,epsilon=0.01)
mixhi
mixhi <- normalmixEM(xhi$na.omit.xhi.,maxit=100,epsilon=0.01)
mixhi
mixhi <- normalmixEM(xhi$na.omit.xhi.,maxit=100,epsilon=0.01)
mixhi$mu
mixhi <- normalmixEM(xhi$na.omit.xhi.,maxit=100,epsilon=0.01)
mixhi$mu
mixhi <- normalmixEM(xhi$na.omit.xhi.,maxit=100,epsilon=0.01)
mixhi$mu
xhi.boot <- boot.comp(xhi$na.omit.xhi., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xhi.boot
xhi.boot <- boot.comp(xhi$na.omit.xhi., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xhi.boot
xhi.boot <- boot.comp(xhi$na.omit.xhi., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xhi.boot
xmed.boot <- boot.comp(xmed$na.omit.xmed., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xmed.boot
xlo.boot <- boot.comp(xlo$na.omit.xlo., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xlo.boot <- boot.comp(xlo$na.omit.xlo., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xlo.boot <- boot.comp(xlo$na.omit.xlo., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xlo.boot <- boot.comp(xlo$na.omit.xlo., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
xlo.boot
mixmed <- normalmixEM(xmed$na.omit.xmed.,maxit=100,epsilon=0.01)
mixmed
mixmed$mu
mixlo$mu
mixlo <- normalmixEM(xlo$na.omit.xlo.,maxit=100,epsilon=0.01)
mixlo$mu
xhi.boot$p.values
mixhi
mixhi$mu
mixhi <- normalmixEM(xhi$na.omit.xhi.,maxit=100,epsilon=0.01)
mixhi$mu
xhi.boot
xhi.boot <- boot.comp(xhi$na.omit.xhi., max.comp=10,mix.type="normalmix", maxit=400, epsilon=1e-2)
round(xlo.boot$p.values, 3)
round(xlo.boot$p.values, 4)
xmed.boot
strength_freq_prev_exp4.2 <- read.csv("C:/Users/nija/Desktop/exp B/strength_freq_prev_exp4.2.csv")
View(strength_freq_prev_exp4.2)
strength_reliability_prev_exp4.2 <- read.csv("C:/Users/nija/Desktop/exp B/strength_reliability_prev_exp4.2.csv")
View(strength_reliability_prev_exp4.2)
freqHi = subset(strength_freq_prev_exp4.2 == 'hi')
relHi = subset(strength_reliability_prev_exp4.2 == 'hi')
freqMed = subset(strength_freq_prev_exp4.2 == 'med')
relMed = subset(strength_reliability_prev_exp4.2 == 'med')
freqlo = subset(strength_freq_prev_exp4.2 == 'lo')
relLo = subset(strength_reliability_prev_exp4.2 == 'lo')
xlo = append(freqlo$frequency,relLo$reliability)
freqlo
freqHi = subset(strength_freq_prev_exp4.2, strength_freq_prev_exp4.2 == 'hi')
freqHi
relHi = subset(strength_reliability_prev_exp4.2, strength_reliability_prev_exp4.2 == 'hi')
relMed = subset(strength_reliability_prev_exp4.2, strength_reliability_prev_exp4.2 == 'med')
freqMed = subset(strength_freq_prev_exp4.2, strength_freq_prev_exp4.2 == 'med')
freqLo = subset(strength_freq_prev_exp4.2, strength_freq_prev_exp4.2 == 'low')
relLo = subset(strength_reliability_prev_exp4.2, strength_reliability_prev_exp4.2 == 'lo')
xlo = append(freqLo$frequency,relLo$reliability)
xmed = append(freqMed$frequency,relMed$reliability)
xhi = append(freqHi$frequency,relHi$reliability)
xlo = data.frame(na.omit(xlo))
xmed = data.frame(na.omit(xmed))
xlo = append(freqLo$frequency,relLo$reliability)
xhi = append(freqHi$frequency,relHi$reliability)
xhi = data.frame(na.omit(xhi))
freqLo = subset(strength_freq_prev_exp4.2, strength_freq_prev_exp4.2 == 'lo')
xlo = append(freqLo$frequency,relLo$reliability)
xlo = data.frame(na.omit(xlo))
hist(xlo)
hist(xlo$na.omit.xlo.)
hist(xmed$na.omit.xmed.)
hist(xhi$na.omit.xhi.)
hist(xMed$xMed, main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
hist(xlo$na.omit.xlo., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
hist(xmed$na.omit.xmed., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xlo$na.omit.xlo., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, ticks = FALSE)
hist(xmed$na.omit.xmed., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1)
hist(xmed$na.omit.xmed., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 20, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xmed$na.omit.xmed., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
hist(xmed$na.omit.xmed., main = 'Medium Base Rate/Medium Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xlo$na.omit.xlo., main = 'Low Base Rate/Large Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
hist(xhi$na.omit.xhi., main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
axis(2, font = 2, las = 1)
hist(xhi$na.omit.xhi., main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
freqHi = subset(strength_freq_causal_exp4.2, strength_freq_causal_exp4.2 == 'hi')
relHi = subset(strength_reliability_causal_exp4.2, strength_reliability_causal_exp4.2 == 'hi')
xhi = append(freqHi$frequency,relHi$reliability)
xhi = data.frame(na.omit(xhi))
hist(xhi$na.omit.xhi., main = 'High Base Rate/Small Virtual Sample Size', col = 'grey', xlab = expression(bolditalic('Strength Rating')), breaks = 10, ylab = expression(bolditalic('Frequency')), las = 1, cex.lab = 1, xaxt = 'n')
axis(2, font = 2, las = 1)
axis(1, at = c(0,20,40,60,80,100), labels = c(0,20,40,60,80,100), font = 2, tick = FALSE)
Sys.getenv("PATH")
g++
)
system('g++ -v')
system('where make')
makevars_user()
makevars_site()
tools::makevars_user()
tools::makevars_site()
?tools::makevars_user
tools::makevars_site()
tools::makevars_user()
list.files()
list.dirs()
?file.edit
file.edit('.R')
file.edit('dfd')
R_MAKEVARS_USER
R_MAKEVARS_USER = "zone"
list.dirs()
Sys.unsetenv("R_MAKEVARS_USER")
Sys.setenv(R_MAKEVARS_USER = "zone")
dotR <- file.path(Sys.getenv("zone"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
system("g++ -v")
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library('rstan')
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
R.version
load("~/useData/control_model.RData")
dim(control$parVals$y_pred)
dim(control$parVals$lp__)
dim(control$parVals$log_lik)
library(hBayesDM)
old.packages()
update.packages('hBayesDM')
detach(package:hBayesDM, unload = T)
update.packages('hBayesDM')
library("hBayesDM", lib.loc="~/R/win-library/3.4")
detach("package:hBayesDM", unload=TRUE)
install.packages("hBayesDM")
R.Version()
library('hBayesDM')
load("~/useData/control_model.RData")
plot(control)
library('hBayesDM')
plot(control)
printFit(control)
library('loo')
pareto_k_ids(control)
pareto_k_table(control)
plot(control, type="trace", inc_warmup=T)
printFit(control)
plotInd(control, 'ep')
plotInd(control, "ep")
plotInd(control)
plotInd(control, 'mu_A')
plotInd(control, 'tau')
plotInd(control, 'A')
plotInd(control, 'mu_tau')
load("~/useData/patients/patient.RData")
plotInd(patient)
printFit(patient)
plotInd(patient, 'A')
plotInd(patient, 'tau')
plot(patient)
plot(patient, type="trace", inc_warmup=T)
load("~/useData/patients/.RData")
patientModel
rm(fit)
plot(diff)
setwd('C:/Users/nija/Documents/useData/patients')
library('hBayesDM')
patientModel = bandit2arm_delta(data = "respTablePatient.txt",
niter = 3000,
nwarmup = 1000,
nchain = 4,
ncore = 2,
adapt_delta = .99,
max_treedepth = 15,
inc_postpred = TRUE)
patientModel = bandit2arm_delta(data = "respTablePatient.txt",
niter = 50,
nwarmup = 10,
nchain = 4,
ncore = 2,
adapt_delta = .99,
max_treedepth = 15,
inc_postpred = TRUE)
patientModel = bandit2arm_delta(data = "respTablePatient.txt",
niter = 5,
nwarmup = 2,
nchain = 2,
ncore = 2,
adapt_delta = .99,
max_treedepth = 15,
inc_postpred = TRUE)
patientModel = bandit2arm_delta(data = "respTablePatient.txt",
niter = 3000,
nwarmup = 1000,
nchain = 4,
ncore = 4,
adapt_delta = .99,
max_treedepth = 15,
inc_postpred = TRUE)
respTablePatient <- read.delim("~/useData/patients/respTablePatient.txt")
View(respTablePatient)
